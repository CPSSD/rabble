syntax = "proto3";

option go_package = "services/proto";

import "google/protobuf/timestamp.proto";

message PostsEntry {
  int64 global_id = 1;
  // TODO(#87): Update referenced author name if user changed accounts.
  int64 author_id = 2;
  string title = 3;
  string body = 4;
  google.protobuf.Timestamp creation_datetime = 5;
  string md_body = 6;
  string ap_id = 7;  // This is the URL ID, i.e. http://a.b/@cian/123
  int64 likes_count = 8;
}

message PostsRequest {
  enum RequestType {
    INSERT = 0;
    FIND   = 1;
    DELETE = 2;
    UPDATE = 3;
  }

  RequestType request_type = 1;

  // Entry used for matching FIND, DELETE and UPDATE queries.
  // E.g {'author': 'CianLR', 'Title': 'test'}
  // Will match all posts by CianLR with a title of 'test'
  PostsEntry match = 2;

  // Entry to INSERT or fields to UPDATE.
  PostsEntry entry = 3;
}

message PostsResponse {
  enum ResultType {
    OK = 0;
    ERROR = 1;
    // Further types can be specified here.
  }

  ResultType result_type = 1;

  string error = 2;

  // If the result_type is OK, and the query returns some entries, then those
  // entries are provided here.
  repeated PostsEntry results = 3;

  // If the request was an INSERT this is the global_id of the inserted post.
  int64 global_id = 4;
}

message UsersEntry {
  string handle = 1;
  string display_name = 2;
  string host = 3;
  int64 global_id = 4;
  // An encrypted version of the user's password.
  // The salt is stored alongside the hashed password, a la bcrypt.
  string password = 5;
  // Plaintext biography of the user
  string bio = 6;
  // Rss url if a rss user or None if normal user
  string rss = 7;
}

message UsersRequest {
  enum RequestType {
    INSERT = 0;
    FIND = 1;
    FIND_NOT = 2;
  }

  RequestType request_type = 1;
  // Equivalent of PostsRequest.match.
  UsersEntry match = 2;
  // Equivalent of PostsRequests.entry.
  UsersEntry entry = 3;
}

message UsersResponse {
  enum ResultType {
    OK = 0;
    ERROR = 1;
    // Further types can be specified here.
  }

  ResultType result_type = 1;

  string error = 2;

  // If the result_type is OK, and the query being responded to requires some
  // entries in return (eg. a FIND query), then those entries are provided here.
  repeated UsersEntry results = 3;
}


message Follow {
  enum State {
    ACTIVE = 0;
    PENDING = 1;
    REJECTED = 2;
    TIMED_OUT = 3;
  }
  int64 follower = 1;
  int64 followed = 2;
  State state = 3;
}

message DbFollowRequest {
  enum RequestType {
    INSERT = 0;
    FIND = 1;
    UPDATE = 2;
  }

  RequestType request_type = 1;

  Follow entry = 2;

  /*
   * If request_type is FIND:
   *   - If match.followed is set, then the service will return all followers
   *     for this user's ID.
   *   - If match.follower is set, the service will return all users this
   *     person follows.
   *   - If both match.followed and match.follower are set, the service will
   *     return an entry if this follow exists, and none otherwise.
   *   - If neither are set, all active follows in the database will be returned
   *
   * You can set follow.state to find follows that are in currently unaccepted
   * but these should only be used carefully, since these followers must not be
   * sent anything. By default, your search will only return active follows.
   *
   * If the request_type is UPDATE:
   *   - match will be used to find an existing follow entry
   *   - The entry follow state will replace the current follow state
   * We do not support modifying any paremater other than state for follows.
   * No response is returned.
   */
  Follow match = 3;
}

message DbFollowResponse {
  enum ResultType {
    OK = 0;
    ERROR = 1;
  }

  ResultType result_type = 1;
  string error = 2;

  repeated Follow results = 3;
}

message LikeEntry {
  int64 user_id = 1;
  int64 article_id = 2;
}

message AddLikeResponse {
  enum ResultType {
    OK = 0;
    ERROR = 1;
  }
  ResultType result_type = 1;
  string error = 2;
}

message InstanceFeedRequest {
  int32 num_posts = 1;
}

service Database {
  rpc Posts(PostsRequest) returns (PostsResponse);
  rpc Users(UsersRequest) returns (UsersResponse);
  rpc Follow(DbFollowRequest) returns (DbFollowResponse);

  // The likes table will require a lot of cross-table style requests,
  // this is why the RPC is in a different style.
  rpc AddLike(LikeEntry) returns (AddLikeResponse);
  // Get the N most recent posts from local users.
  rpc InstanceFeed(InstanceFeedRequest) returns (PostsResponse);
}
