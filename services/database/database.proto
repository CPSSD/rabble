syntax = "proto3";

import "google/protobuf/timestamp.proto";

message PostsEntry {
  string global_id = 1;
  // TODO(#87): Update referenced author name if user changed accounts.
  string author = 2;
  string title = 3;
  string body = 4;
  google.protobuf.Timestamp creation_datetime = 5;
}

message PostsRequest {
  enum RequestType {
    INSERT = 0;
    FIND   = 1;
    DELETE = 2;
    UPDATE = 3;
  }

  RequestType request_type = 1;

  // Entry used for matching FIND, DELETE and UPDATE queries.
  // E.g {'author': 'CianLR', 'Title': 'test'}
  // Will match all posts by CianLR with a title of 'test'
  PostsEntry match = 2;

  // Entry to INSERT or fields to UPDATE.
  PostsEntry entry = 3;
}

message PostsResponse {
  enum ResultType {
    OK = 0;
    ERROR = 1;
    // Further types can be specified here.
  }

  ResultType result_type = 1;

  string error = 2;

  // If the result_type is OK, and the query returns some entries, then those
  // entries are provided here.
  repeated PostsEntry results = 3;
}

message UsersEntry {
  string handle = 1;
  string display_name = 2;
  string host = 3;
}

message UsersRequest {
  enum RequestType {
    INSERT = 0;
  }

  RequestType request_type = 1;
  UsersEntry entry = 2;
}

message UsersResponse {
  enum ResultType {
    OK = 0;
    ERROR = 1;
    // Further types can be specified here.
  }

  ResultType result_type = 1;

  string error = 2;

  // If the result_type is OK, and the query being responded to requires some
  // entries in return (eg. a FIND query), then those entries are provided here.
  repeated UsersEntry results = 3;
}

message Follow {
  int64 follower = 1;
  int64 followed = 2;
}

message DbFollowRequest {
  enum RequestType {
    INSERT = 0;
  }

  RequestType request_type = 1;
  Follow entry = 2;
}

message DbFollowResponse {
  enum ResultType {
    OK = 0;
    ERROR = 1;
  }

  ResultType result_type = 1;
  string error = 2;
}

service Database {
  rpc Posts(PostsRequest) returns (PostsResponse);
  rpc Users(UsersRequest) returns (UsersResponse);
  rpc Follows(DbFollowRequest) returns (DbFollowResponse);
}
